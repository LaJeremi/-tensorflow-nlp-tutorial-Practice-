{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1e578c9a",
   "metadata": {},
   "source": [
    "# 08-04 케라스의 SimpleRNN과 LSTM 이해하기\n",
    "\n",
    "\n",
    "\n",
    "출처:  https://wikidocs.net/106473\n",
    "\n",
    "\n",
    "# 1. 임의의 입력 생성하기\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bf04433b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.layers import SimpleRNN, LSTM, Bidirectional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "949a8c40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4, 5)\n"
     ]
    }
   ],
   "source": [
    "# 단어 벡터의 차원은 5이고, 문장의 길이가 4인 경우를 가정한 입력\n",
    "# 우선 RNN과 LSTM을 테스트하기 위한 임의의 입력을 만듭니다.\n",
    "\n",
    "train_X = [[0.1, 4.2, 1.5, 1.1, 2.8], [1.0, 3.1, 2.5, 0.7, 1.1], [0.3, 2.1, 1.5, 2.1, 0.1], [2.2, 1.4, 0.5, 0.9, 1.1]]\n",
    "print(np.shape(train_X))\n",
    "\n",
    "# 4번의 시점(timesteps)이 존재\n",
    "# 각 시점마다 5차원의 단어 벡터가 입력으로 사용\n",
    "# 그런데 앞서 RNN은 2D 텐서가 아니라 3D 텐서를 입력\n",
    "# 2D 텐서를 3D 텐서로 변경"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f29abc32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 4, 5)\n"
     ]
    }
   ],
   "source": [
    "# 즉, 위에서 만든 2D 텐서를 3D 텐서로 변경합니다. 이는 배치 크기 1을 추가해주므로서 해결\n",
    "\n",
    "train_X = [[[0.1, 4.2, 1.5, 1.1, 2.8], [1.0, 3.1, 2.5, 0.7, 1.1], [0.3, 2.1, 1.5, 2.1, 0.1], [2.2, 1.4, 0.5, 0.9, 1.1]]]\n",
    "train_X = np.array(train_X, dtype=np.float32)\n",
    "print(train_X.shape)\n",
    "\n",
    "# (batch_size, timesteps, input_dim)에 해당되는 (1, 4, 5)의 크기를 가지는 3D 텐서가 생성\n",
    "# batch_size는 한 번에 RNN이 학습하는 데이터의 양을 의미하지만, \n",
    "# 여기서는 샘플이 1개 밖에 없으므로 batch_size는 1\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6c452df",
   "metadata": {},
   "source": [
    "# 2. SimpleRNN 이해하기\n",
    "\n",
    "SimpleRNN의 입력으로 사용하여 SimpleRNN의 출력값을 이해\n",
    "\n",
    "SimpleRNN에는 여러 인자가 있으며 대표적인 인자로 return_sequences와 return_state가 있습니다. \n",
    "기본값으로는 둘 다 False로 지정\n",
    "\n",
    "은닉 상태의 크기를 3으로 지정하고, 두 인자 값이 모두 False일 때의 출력값\n",
    "\n",
    "SimpleRNN을 매번 재선언하므로 은닉 상태의 값 자체는 매번 초기화되어 이전 출력과 값의 일관성은 없습니다. 그래서 출력값 자체보다는 해당 값의 크기(shape)에 주목"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "58722fa3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hidden state : [[ 0.95238656 -0.7153944  -0.9691323 ]], shape: (1, 3)\n"
     ]
    }
   ],
   "source": [
    "rnn = SimpleRNN(3)\n",
    "# rnn = SimpleRNN(3, return_sequences=False, return_state=False)와 동일.\n",
    "hidden_state = rnn(train_X)\n",
    "\n",
    "print('hidden state : {}, shape: {}'.format(hidden_state, hidden_state.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4df7c11b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hidden states : [[[ 0.8682559   0.80869937 -0.78556764]\n",
      "  [ 0.72719985 -0.4683274  -0.68773955]\n",
      "  [ 0.4319959  -0.30614448  0.7951769 ]\n",
      "  [ 0.93733925  0.7209278  -0.8964267 ]]], shape: (1, 4, 3)\n"
     ]
    }
   ],
   "source": [
    "# (1, 3) 크기의 텐서가 출력되는데, 이는 마지막 시점의 은닉 상태\n",
    "# 은닉 상태의 크기를 3으로 지정했음을 주목합시다. \n",
    "# 기본적으로 return_sequences가 False인 경우에는 SimpleRNN은 마지막 시점의 은닉 상태만 출력\n",
    "\n",
    "# return_sequences를 True로 지정하여 모든 시점의 은닉 상태를 출력\n",
    "\n",
    "rnn = SimpleRNN(3, return_sequences=True)\n",
    "hidden_states = rnn(train_X)\n",
    "\n",
    "print('hidden states : {}, shape: {}'.format(hidden_states, hidden_states.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12d625b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# (1, 4, 3) 크기의 텐서가 출력됩니다. 앞서 입력 데이터는 (1, 4, 5)의 크기를 가지는 3D 텐서였고, \n",
    "# 그 중 4가 시점(timesteps)에 해당하는 값\n",
    "\n",
    "# 모든 시점에 대해서 은닉 상태의 값을 출력하여 (1, 4, 3) 크기의 텐서를 출력\n",
    "\n",
    "# return_state가 True일 경우에는 return_sequences의 True/False 여부와 상관없이 마지막 시점의 은닉 상태를 출력\n",
    "\n",
    "# . 가령, return_sequences가 True이면서, return_state를 True로 할 경우 SimpleRNN은 두 개의 출력을 리턴\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "698e3ae2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hidden states : [[[ 0.9563067   0.479294    0.5932485 ]\n",
      "  [ 0.3864855   0.4941487   0.2557877 ]\n",
      "  [ 0.15310854  0.8304524   0.71793   ]\n",
      "  [ 0.6924956  -0.9156045  -0.7840764 ]]], shape: (1, 4, 3)\n",
      "last hidden state : [[ 0.6924956 -0.9156045 -0.7840764]], shape: (1, 3)\n"
     ]
    }
   ],
   "source": [
    "rnn = SimpleRNN(3, return_sequences=True, return_state=True)\n",
    "hidden_states, last_state = rnn(train_X)\n",
    "\n",
    "print('hidden states : {}, shape: {}'.format(hidden_states, hidden_states.shape))\n",
    "print('last hidden state : {}, shape: {}'.format(last_state, last_state.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1942fb08",
   "metadata": {},
   "source": [
    " 첫번째 출력은 return_sequences=True로 인한 출력으로 모든 시점의 은닉 상태입니다. 두번째 출력은 return_state=True로 인한 출력으로 마지막 시점의 은닉 상태입니다. 실제로 출력을 보면 모든 시점의 은닉 상태인 (1, 4, 3) 텐서의 마지막 벡터값이 return_state=True로 인해 출력된 벡터값과 일치하는 것을 볼 수 있습니다. (둘 다 [-0.5144398 -0.5037417 0.96605766])\n",
    " \n",
    " 그렇다면 return_sequences는 False인데, retun_state가 True인 경우는 어떨까요?\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d04bc4fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hidden state : [[0.75389296 0.9886209  0.26462948]], shape: (1, 3)\n",
      "last hidden state : [[0.75389296 0.9886209  0.26462948]], shape: (1, 3)\n"
     ]
    }
   ],
   "source": [
    "rnn = SimpleRNN(3, return_sequences=False, return_state=True)\n",
    "hidden_state, last_state = rnn(train_X)\n",
    "\n",
    "print('hidden state : {}, shape: {}'.format(hidden_state, hidden_state.shape))\n",
    "print('last hidden state : {}, shape: {}'.format(last_state, last_state.shape))\n",
    "\n",
    "# 두 개의 출력 모두 마지막 시점의 은닉 상태를 출력하게 됩니다.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c8cde87",
   "metadata": {},
   "source": [
    "## 3. LSTM 이해하기\n",
    "\n",
    "실제로 SimpleRNN이 사용되는 경우는 거의 없습니다. 이보다는 LSTM이나 GRU을 주로 사용하는데, 이번에는 임의의 입력에 대해서 LSTM을 사용할 경우를 보겠습니다. 우선 return_sequences를 False로 두고, return_state가 True인 경우를 봅시다.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8cb84575",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hidden state : [[ 0.14786062 -0.02461654  0.53968257]], shape: (1, 3)\n",
      "last hidden state : [[ 0.14786062 -0.02461654  0.53968257]], shape: (1, 3)\n",
      "last cell state : [[ 0.88886356 -0.45681342  1.1829791 ]], shape: (1, 3)\n"
     ]
    }
   ],
   "source": [
    "lstm = LSTM(3, return_sequences=False, return_state=True)\n",
    "hidden_state, last_state, last_cell_state = lstm(train_X)\n",
    "\n",
    "print('hidden state : {}, shape: {}'.format(hidden_state, hidden_state.shape))\n",
    "print('last hidden state : {}, shape: {}'.format(last_state, last_state.shape))\n",
    "print('last cell state : {}, shape: {}'.format(last_cell_state, last_cell_state.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ff21d02b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hidden states : [[[ 0.06391395 -0.6245022  -0.01983466]\n",
      "  [ 0.10657613 -0.83576024 -0.03310097]\n",
      "  [ 0.18945546 -0.7774034  -0.11349919]\n",
      "  [ 0.22248836 -0.6198978  -0.19607462]]], shape: (1, 4, 3)\n",
      "last hidden state : [[ 0.22248836 -0.6198978  -0.19607462]], shape: (1, 3)\n",
      "last cell state : [[ 0.5766437 -0.9561323 -1.8014917]], shape: (1, 3)\n"
     ]
    }
   ],
   "source": [
    "# 이번에는 SimpleRNN 때와는 달리, 세 개의 결과를 반환합니다. \n",
    "# return_sequences가 False이므로 우선 첫번째 결과는 마지막 시점의 은닉 상태\n",
    "\n",
    "# LSTM이 SimpleRNN과 다른 점은 return_state를 True로 둔 경우에는\n",
    "# 마지막 시점의 은닉 상태뿐만 아니라 셀 상태까지 반환한다는 점입니다. \n",
    "# 이번에는 return_sequences를 True로 바꿔보겠습니다.\n",
    "\n",
    "lstm = LSTM(3, return_sequences=True, return_state=True)\n",
    "hidden_states, last_hidden_state, last_cell_state = lstm(train_X)\n",
    "\n",
    "print('hidden states : {}, shape: {}'.format(hidden_states, hidden_states.shape))\n",
    "print('last hidden state : {}, shape: {}'.format(last_hidden_state, last_hidden_state.shape))\n",
    "print('last cell state : {}, shape: {}'.format(last_cell_state, last_cell_state.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bf8a07f",
   "metadata": {},
   "source": [
    "return_state가 True이므로 두번째 출력값이 마지막 은닉 상태, \n",
    "\n",
    "세번째 출력값이 마지막 셀 상태인 것은 변함없지만 return_sequences가 True이므로 \n",
    "\n",
    "첫번째 출력값은 모든 시점의 은닉 상태가 출력됩니다.\n",
    "\n",
    "# 4. Bidirectional(LSTM) 이해하기\n",
    "\n",
    "난이도를 조금 올려서 양방향 LSTM의 출력값을 확인해보겠습니다. return_sequences가 True인 경우와 False인 경우에 대해서 은닉 상태의 값이 어떻게 바뀌는지 직접 비교하기 위해서 이번에는 출력되는 은닉 상태의 값을 고정시켜주겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "10e321aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "k_init = tf.keras.initializers.Constant(value=0.1)\n",
    "b_init = tf.keras.initializers.Constant(value=0)\n",
    "r_init = tf.keras.initializers.Constant(value=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "57c99fa2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hidden states : [[0.6303138 0.6303138 0.6303138 0.7038734 0.7038734 0.7038734]], shape: (1, 6)\n",
      "forward state : [[0.6303138 0.6303138 0.6303138]], shape: (1, 3)\n",
      "backward state : [[0.7038734 0.7038734 0.7038734]], shape: (1, 3)\n"
     ]
    }
   ],
   "source": [
    "# 우선 return_sequences가 False이고, return_state가 True인 경우입니다.\n",
    "\n",
    "bilstm = Bidirectional(LSTM(3, return_sequences=False, return_state=True, \\\n",
    "                            kernel_initializer=k_init, bias_initializer=b_init, recurrent_initializer=r_init))\n",
    "hidden_states, forward_h, forward_c, backward_h, backward_c = bilstm(train_X)\n",
    "\n",
    "print('hidden states : {}, shape: {}'.format(hidden_states, hidden_states.shape))\n",
    "print('forward state : {}, shape: {}'.format(forward_h, forward_h.shape))\n",
    "print('backward state : {}, shape: {}'.format(backward_h, backward_h.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59b31d44",
   "metadata": {},
   "source": [
    "이번에는 무려 5개의 값을 반환합니다. return_state가 True인 경우에는 정방향 LSTM의 은닉 상태와 셀 상태, 역방향 LSTM의 은닉 상태와 셀 상태 4가지를 반환하기 때문\n",
    "\n",
    "다만, 셀 상태는 각각 forward_c와 backward_c에 저장만 하고 출력하지 않았습니다.\n",
    "\n",
    "첫번째 출력값의 크기가 (1, 6)인 것에 주목합시다. 이는 return_sequences가 False인 경우 정방향 LSTM의 마지막 시점의 은닉 상태와 역방향 LSTM의 첫번째 시점의 은닉 상태가 연결된 채 반환되기 때문입니다. 그림으로 표현하면 아래와 같이 연결되어 다음층에서 사용됩니다.\n",
    "\n",
    "마찬가지로 return_state가 True인 경우에 반환한 은닉 상태의 값인 forward_h와 backward_h는 각각 정방향 LSTM의 마지막 시점의 은닉 상태와 역방향 LSTM의 첫번째 시점의 은닉 상태값\n",
    "\n",
    "그리고 이 두 값을 연결한 값이 hidden_states에 출력되는 값\n",
    "\n",
    "정방향 LSTM의 마지막 시점의 은닉 상태값과 역방향 LSTM의 첫번째 은닉 상태값을 기억해둡시다.\n",
    "\n",
    "* 정방향 LSTM의 마지막 시점의 은닉 상태값 : [0.6303139 0.6303139 0.6303139]\n",
    "\n",
    "* 역방향 LSTM의 첫번째 시점의 은닉 상태값 : [0.70387346 0.70387346 0.70387346]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4a0d5746",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 현재 은닉 상태의 값을 고정시켜두었기 때문에 return_sequences를 True로 할 경우,\n",
    "# 출력이 어떻게 바뀌는지 비교가 가능합니다.\n",
    "\n",
    "bilstm = Bidirectional(LSTM(3, return_sequences=True, return_state=True, \\\n",
    "                            kernel_initializer=k_init, bias_initializer=b_init, recurrent_initializer=r_init))\n",
    "hidden_states, forward_h, forward_c, backward_h, backward_c = bilstm(train_X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf766818",
   "metadata": {},
   "source": [
    "hidden states의 출력값에서는 이제 모든 시점의 은닉 상태가 출력됩니다. 역방향 LSTM의 첫번째 시점의 은닉 상태는 더 이상 정방향 LSTM의 마지막 시점의 은닉 상태와 연결되는 것이 아니라 정방향 LSTM의 첫번째 시점의 은닉 상태와 연결됩니다.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
